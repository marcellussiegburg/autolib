{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "TES/Data.hs.drift" #-}
-- -*- mode: haskell -*-

module TES.Data where

-- implements term rewriting systems
-- as represented in the .tes-format

import TES.Symbol
import TES.Term
import TES.Rule

import Sets
import Tree

import ToDoc
import Reader

import Parsec
import ParsecToken
import TES.Parsec


data TES = TES
	 { variables :: Set String 
	 , signature :: Signature
	 , rules :: [ Rule ]
	 }

{-! for TES derive: ToDoc !-}

instance Show TES where show = render . toDoc

instance Reader TES where
    readerPrec p = do
        whiteSpace tes
        vs <- readerPrec 0 :: Parser [ Symbol ]
	rs <- many ( readerPrec 0 ) -- regeln
        return $ TES { variables = mkSet $ map name vs
		     , rules = rs
		     , signature = emptySet
		     }

instance Read TES where
    readsPrec = parsec_readsPrec



{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ToDoc TES where
    toDocPrec d (TES aa ab ac) = docParen (d >= 10)
	      (text "TES" <+> dutch_record
	       [text "variables" <+> equals <+> toDocPrec 0 aa,
		text "signature" <+> equals <+> toDocPrec 0 ab,
		text "rules" <+> equals <+> toDocPrec 0 ac])

--  Imported from other files :-
