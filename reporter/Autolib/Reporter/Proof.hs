{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "Reporter/Proof.hs.drift" #-}
-- -*- mode: haskell -*-

module Reporter.Proof where

--  $Id$

import Output
import ToDoc

data Proof = 
     Proof { value  :: Bool
	   , reason :: Output
	   }

instance Eq Proof where
    p == q = value p == value q

instance ToDoc Output where toDoc = Output.render

{-! for Proof derive : ToDoc !-}

instance Show Proof where show = ToDoc.render . toDoc

{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ToDoc Proof where
    toDocPrec d (Proof aa ab) = docParen (d >= 10)
	      (text "Proof" <+> dutch_record
	       [text "value" <+> equals <+> toDocPrec 0 aa,
		text "reason" <+> equals <+> toDocPrec 0 ab])

--  Imported from other files :-
