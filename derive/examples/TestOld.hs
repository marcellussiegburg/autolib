{- Generated by AutoDrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "TestOld.hs.drift" #-}
-- {-# OPTIONS_GHC -ddump-splices #-}

module TestOld where

import Autolib.Reader
import Autolib.ToDoc
import Autolib.Multilingual.Doc

import Data.DeriveTH (derives)

data MMaybe a = JJust a | NNothing
    deriving Eq

data Frotz = A | B Frotz | C { sub :: Frotz } | D { sub :: Frotz, foo :: Frotz }
    deriving Eq

data Hard = Aaa | AAa | AAA { aaa :: Hard }
    deriving Eq

{-! for MMaybe derive: ToDoc, Reader !-}
{-! for Frotz derive: ToDoc, Reader !-}
{-! for Hard derive: ToDoc, Reader !-}

t1 :: MMaybe Frotz
t1 = JJust (D { sub = B A, foo = C { sub = A } })

t2 :: [Hard]
t2 = [Aaa, AAa, AAA AAa]

q :: (Reader a, ToDoc a, Eq a) => a -> Maybe Doc
q a = case runParser reader () "" (showDoc $ toDoc a) of
    Right a' -> if a == a' then Nothing else Just (err a')
    Left e   -> Just (text (show e))
  where
    err a' = vcat [text "wrong answer:",
                   nest 4 $ toDoc a',
                   text "expected:",
                   nest 4 $  toDoc a]
{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance ToDoc Hard where
    toDocPrec d (Aaa) = text "Aaa"
    toDocPrec d (AAa) = text "AAa"
    toDocPrec d (AAA aa) = docParen (d >= 10)
              (text "AAA" </> dutch_record
               [text "aaa" <+> equals <+> toDocPrec 0 aa])

instance Reader Hard where
    atomic_readerPrec d = readerParenPrec d $ \ d -> do
                      ((do my_reserved "Aaa"
                           return (Aaa))
                       <|>
                       (do my_reserved "AAa"
                           return (AAa))
                       <|>
                       (do guard (d < 9)
                           my_reserved "AAA"
                           my_braces ((do my_reserved "aaa"
                                          my_equals
                                          aa <- readerPrec 0
                                          return (AAA aa)))))

instance ToDoc Frotz where
    toDocPrec d (A) = text "A"
    toDocPrec d (B aa) = docParen (d >= 10)
              (text "B" </> fsep [toDocPrec 10 aa])
    toDocPrec d (C aa) = docParen (d >= 10)
              (text "C" </> dutch_record
               [text "sub" <+> equals <+> toDocPrec 0 aa])
    toDocPrec d (D aa ab) = docParen (d >= 10)
              (text "D" </> dutch_record
               [text "sub" <+> equals <+> toDocPrec 0 aa,
                text "foo" <+> equals <+> toDocPrec 0 ab])

instance Reader Frotz where
    atomic_readerPrec d = readerParenPrec d $ \ d -> do
                      ((do my_reserved "A"
                           return (A))
                       <|>
                       (do guard (d < 9)
                           my_reserved "B"
                           aa <- readerPrec 9
                           return (B aa))
                       <|>
                       (do guard (d < 9)
                           my_reserved "C"
                           my_braces ((do my_reserved "sub"
                                          my_equals
                                          aa <- readerPrec 0
                                          return (C aa))))
                       <|>
                       (do guard (d < 9)
                           my_reserved "D"
                           my_braces ((do my_reserved "sub"
                                          my_equals
                                          aa <- readerPrec 0
                                          my_comma
                                          my_reserved "foo"
                                          my_equals
                                          ab <- readerPrec 0
                                          return (D aa ab)))))

instance (ToDoc a) => ToDoc (MMaybe a) where
    toDocPrec d (JJust aa) = docParen (d >= 10)
              (text "JJust" </> fsep [toDocPrec 10 aa])
    toDocPrec d (NNothing) = text "NNothing"

instance (Reader a) => Reader (MMaybe a) where
    atomic_readerPrec d = readerParenPrec d $ \ d -> do
                      ((do guard (d < 9)
                           my_reserved "JJust"
                           aa <- readerPrec 9
                           return (JJust aa))
                       <|>
                       (do my_reserved "NNothing"
                           return (NNothing)))

--  Imported from other files :-
