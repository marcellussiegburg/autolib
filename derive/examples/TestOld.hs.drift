-- {-# OPTIONS_GHC -ddump-splices #-}

module TestOld where

import Autolib.Reader
import Autolib.ToDoc
import Autolib.Multilingual.Doc

import Data.DeriveTH (derives)

data MMaybe a = JJust a | NNothing
    deriving Eq

data Frotz = A | B Frotz | C { sub :: Frotz } | D { sub :: Frotz, foo :: Frotz }
    deriving Eq

data Hard = Aaa | AAa | AAA { aaa :: Hard }
    deriving Eq

{-! for MMaybe derive: ToDoc, Reader !-}
{-! for Frotz derive: ToDoc, Reader !-}
{-! for Hard derive: ToDoc, Reader !-}

t1 :: MMaybe Frotz
t1 = JJust (D { sub = B A, foo = C { sub = A } })

t2 :: [Hard]
t2 = [Aaa, AAa, AAA AAa]

q :: (Reader a, ToDoc a, Eq a) => a -> Maybe Doc
q a = case runParser reader () "" (showDoc $ toDoc a) of
    Right a' -> if a == a' then Nothing else Just (err a')
    Left e   -> Just (text (show e))
  where
    err a' = vcat [text "wrong answer:",
                   nest 4 $ toDoc a',
                   text "expected:",
                   nest 4 $  toDoc a]
