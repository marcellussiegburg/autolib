-- -*- mode: haskell -*-

--  $Id$

module Autolib.Graph.Reading.Type where

import Autolib.Graph.Kante

import Autolib.ToDoc
import Autolib.Symbol
import Autolib.Reader
import Autolib.Set
import Autolib.Hash

-- import Text.XML.HaXml.Haskell2Xml


data ( Hash a, Ord a
     , ToDoc ( Set (Kante a)), ToDoc ( Set a )
     , Reader ( Set (Kante a)), Reader ( Set a )
--     , Haskell2Xml ( Set a )   , Haskell2Xml ( Set (Kante a ))
     ) => 
     Graph a = 
     Graph { knoten :: Set a
	   , kanten :: Set ( Kante a )
	   }
    deriving ( Eq, Ord )

instance  ( Hash a, ToDoc [a], Reader [a]    
--	  , Haskell2Xml a
          , ToDoc a, Reader a, Ord a
	  ) 
      =>   Hash ( Graph a ) where
    hash g = hash ( kanten g , knoten g )

{-! for Graph derive: ToDoc, Reader -}


				