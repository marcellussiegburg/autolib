{-# OPTIONS -fglasgow-exts -fallow-overlapping-instances -fallow-undecidable-instances #-}

module Autolib.Xml 

( Container (..)
)

where

--  $Id$

-- import Text.XML.HaXml.Haskell2Xml

class Container a con | a -> con  where
    label  :: a -> String
    pack   :: a -> con
    unpack :: con -> a

{-
-- | this is copied from what DrIFT makes of it
-- * Generated by DrIFT : Look, but Don't Touch. *
instance (Container a con , Haskell2Xml con) => Haskell2Xml a   where
    toHType (v :: a) = 
             Defined (label v) [toHType $ pack v] 
		      [Constr (label v) [toHType (pack v)] [toHType (pack v)]]
    fromContents (CElem (Elem constr [] cs):etc) 
        | label (undefined :: a) `isPrefixOf` constr =
            (\(aa,_)-> (unpack aa :: a, etc)) (fromContents cs)
    toContents v = 
        let aa = pack v
        in [mkElemC (showConstr 0 (toHType v)) (toContents aa)]
-}