{- Generated by DrIFT (Automatic class derivations for Haskell) -}
{-# LINE 1 "util/Reader/Derived.hs.drift" #-}
-- -*- mode: haskell -*-

module Reader.Derived where

-- $Id$

import Reader.Class
import Reader.Basic

{-! for Bool   derive : Reader !-}
{-! for Maybe  derive : Reader !-}
{-! for Either derive : Reader !-}

{-* Generated by DrIFT : Look, but Don't Touch. *-}
instance (Reader a,Reader b) => Reader (Either a b) where
    readerPrec d =
	       readerParen (d > 9)
	       (do my_reserved "Left"
		   aa <- readerPrec 0
		   return (Left aa))
	       <|>
	       readerParen (d > 9)
	       (do my_reserved "Right"
		   aa <- readerPrec 0
		   return (Right aa))

instance (Reader a) => Reader (Maybe a) where
    readerPrec d =
	       readerParen (d > 9)
	       (do my_reserved "Just"
		   aa <- readerPrec 0
		   return (Just aa))
	       <|>
	       (do my_reserved "Nothing"
		   return (Nothing))

instance Reader Bool where
    readerPrec d =
	       (do my_reserved "False"
		   return (False))
	       <|>
	       (do my_reserved "True"
		   return (True))

--  Imported from other files :-
