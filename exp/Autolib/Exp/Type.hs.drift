-- -*- mode: haskell -*-

module Autolib.Exp.Type where

--  $Id$

import Data.Typeable
import Text.XML.HaXml.Haskell2Xml

-- | regular expressions
data RX c
	= Ref String  -- ^ reference to value in evironment
	| Letter c

	| Dot (RX c) (RX c)
	| Union (RX c) (RX c)
	| Intersection (RX c) (RX c)
	| Difference (RX c) (RX c)
	| SymDiff (RX c) (RX c)
	| Shuffle (RX c) (RX c)

	| Left_Quotient (RX c) (RX c)
	| Right_Quotient (RX c) (RX c)

	| Power Integer (RX c) 
	| PowerStar (RX c)
	| PowerPlus (RX c)
    deriving ( Eq, Ord )

{-! for RX derive: Haskell2Xml !-}

-- | for  backward compatibility
type Exp = RX Char 

instance Typeable c => Typeable (RX c) where
    typeOf (_ :: RX c) = 
	mkAppTy (mkTyCon "RX") 
	       [ typeOf (undefined :: c) ]

instance Typeable Exp where
    typeOf _ = mkAppTy (mkTyCon "Exp") []


    
    